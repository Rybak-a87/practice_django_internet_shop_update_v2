----------------------------------------------------------------------

Создание виртуального окружения:
---
1ый способ:
python -m venv <имя окружения>
---
2ой способ:
pip install virtualenv
virtualenv <имя окружения>
---
Зайти в виртуальное окружение:
-Linux:
source <имя окружения>/bin/activate
-Windows:
<имя окружения>\Scripts\activate
---
-Выйти из виртуального окружения:
deactivate

----------------------------------------------------------------------

Файл requirements.txt:
---
Запись в файл:
pip freeze > requirements.txt
---
Чтение с файла:
pip install -r requirements.txt

----------------------------------------------------------------------

Git:
---
(файл .gitconfig содержит конфигурации Git)
(файл .gitignore содержит наименование папок и файлов которые игнорирует Git)
---
Установить имя пользователя в Git:
git config --global user.name "<имя>"
---
Установить почту пользователя в Git:
git config --global user.email "<почта>"
---
Просмотр конфигураций:
git config --list
---
Создать базу данных .git в репозитории:
git init .
---
Проверка статуса (происходящее в базе Git):
git status
---
Список бренчей:
git branch
---
Создать бренч:
git branch <имя бренча>
---
Перейти на другой бренч:
git checkout <имя бренча>
---
Удаление бренча:
git branch -d <имя бренча>
---
Добавление файлов в репозиторий Git:
git add . (вместо точки можно указать папку или файл)
--
Закрепление в Git:
git commit -m "<описание закрепления>"
---
Копировать проект с сервера:
git clone <ссылка>
---
Отправка обновленного проекта с пк на сервер:
git push
---
Обновление проекта на пк с сервера:
git pull

----------------------------------------------------------------------
Django:
---
Создание проекта:
django-admin startproject <имя проекта> . (точка не создает подкаталог с именем проекта)
---
Создание приложения:
python manage.py startapp <имя приложения>
---
Миграции:
python manage.py makemigrations
python manage.py migrate
---
Создание суперпользователя:
python manage.py createsuperuser
---
Запуск локального сервера:
python manage.py runserver
---
Запуск тестирования
python manage.py test

----------------------------------------------------------------------

Этапы создания интернет магазина (продолжение)

1. Рефакторинг (часть 1)

2. Рефакторинг (часть 2)

3. Расширяем navbar

4. Авторизация (Django user authorization)

5. Регистрация (Django user registration)

6. Профиль пользователя (Django user profile)

7. Новые модели

8. Подключаем PostgreSQL
    pip install psycopg2-binary

    psql postgres
    создать базу данных:
        CREATE DATABASE <имя базы>;
    создать пользователя:
        CREATE USER <имя пользователя> WITH PASSWORD '<пароль>';
    дать пользователю все права на управление базой данных (root):
        GRANT ALL PRIVILEGES ON DATABASE  "<имя базы>" TO <имя пользователя>;

